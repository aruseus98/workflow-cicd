version: '3'
services:
  traefik:
    image: traefik:v2.5
    restart: always
    command:
      - "--log.level=DEBUG" # Permet d'avoir les logs de traefik
      - "--api.insecure=false" # Activer l'API sans sécurité (à désactiver en production)
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false" # Ne pas exposer les containers par défaut
      - "--entrypoints.web.address=:80" # Port pour le HTTP 
      - "--entrypoints.websecure.address=:443" # Port pour le HTTPS
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--entrypoints.metrics.address=:8084"
      #SSL let's encrypt, HTTPS
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=example@gmail.com" # Remplacez par votre email
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"

    ports:
      - "80:80"
      - "443:443"
      - "8084:8084" # Pour les métriques de Prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`domaine.name.com`)" #On associe un nom de domaine au service en question et traefik s'occupera de re router
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth" # Ajout d'un middleware pour activer l'authentification
      - "traefik.http.middlewares.auth.basicauth.users=[USER_A_MODIFIER]:[PASSWORD_A_MODIFIER]" # Ajout de l'authenfication via ID et MDP hashé les $ car docker interprète différement les $
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Traefik doit accéder au socket Docker
      - ./letsencrypt:/letsencrypt #Stocker les certificats let's encrypt
    networks:
      - my-network

  # Ajout des metrics PROMETHEUS

  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - /home/debian/prometheus-config.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - my-network

  # Utilisation de grafana pour récupérer les metrics de PROMETHEUS

  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3000:3000"
    networks:
      - my-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`domaine.name.com`)" # Vous pouvez ajuster le sous-domaine selon vos besoins.
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000" 
      - "traefik.http.routers.grafana.tls.certresolver=myresolver"

  gitlab:
    image: gitlab/gitlab-ce:latest
    restart: always
    hostname: gitlab
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://domaine.name.com'
        nginx['listen_port'] = 80 # 
        nginx['listen_https'] = false
        nginx['real_ip_trusted_addresses'] = ['172.18.0.0/16']
        nginx['real_ip_header'] = 'X-Real-IP'
        nginx['real_ip_recursive'] = 'on'
    ports:
      - 81:80
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gitlab.rule=Host(`domaine.name.com`)"  # Sous-domaine pour GitLab
      - "traefik.http.services.gitlab.loadbalancer.server.port=80"  # Même si GitLab écoute sur le port 81 du host, à l'intérieur du conteneur, il écoute sur le port 80.
      - "traefik.http.routers.gitlab.entrypoints=websecure"
      - "traefik.http.routers.gitlab.tls.certresolver=myresolver"
    volumes:
      - /home/debian/gitlab/config:/etc/gitlab
      - /home/debian/gitlab/logs:/var/log/gitlab
      - /home/debian/gitlab/data:/var/opt/gitlab
    networks:
      - my-network
    # Pour environment 
    # external_url : Cette ligne indique à GitLab l'URL externe à laquelle il sera accessible. Ici, il est configuré pour utiliser le protocole HTTPS.
    # nginx['listen_port'] = 80: Ici, on configure Nginx pour écouter sur le port 80 pour le trafic HTTP, ce qui est nécessaire car Traefik gérera le trafic HTTPS et le transmettra à GitLab en tant que trafic HTTP.
    # nginx['listen_https'] = false: Cela désactive l'écoute du trafic HTTPS directement par Nginx, car vous avez Traefik pour gérer le SSL/TLS et la terminaison HTTPS.
    # nginx['real_ip_trusted_addresses'] = ['172.18.0.0/16']: Cette ligne sert à configurer Nginx pour qu'il fasse confiance aux en-têtes X-Real-IP provenant d'adresses IP au sein de cette plage. Cela permet à Nginx de connaître la véritable adresse IP de l'utilisateur final, même si la requête passe par Traefik.
    # nginx['real_ip_header'] = 'X-Real-IP': Cette configuration indique à Nginx quel en-tête utiliser pour déterminer l'adresse IP réelle du client lorsqu'il reçoit des requêtes à travers un proxy (Traefik dans votre cas).
    # nginx['real_ip_recursive'] = 'on': Lorsque cette option est activée, Nginx examinera récursivement les en-têtes X-Real-IP pour obtenir l'adresse IP du client. Cela est utile si vous avez plusieurs niveaux de proxies.
  jenkins:
    image: jenkins/jenkins:2.414.3-lts-jdk17
    restart: always
    hostname: jenkins
    #ports:
    #  - 8080:8081
    #  - 50000:50000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jenkins.rule=Host(`domaine.name.com`)" # Vous pouvez ajuster le sous-domaine selon vos besoins.
      - "traefik.http.services.jenkins.loadbalancer.server.port=8080"
      - "traefik.http.routers.jenkins.entrypoints=websecure"
      - "traefik.http.routers.jenkins.tls.certresolver=myresolver"
    volumes:
      - /home/debian/jenkins_home:/debian/jenkins_home
      - /home/debian/docker-compose.yml:/home/debian/docker-compose.yml
      - /home/debian/.env:/home/debian/.env
      - /home/debian/api/Dockerfile:/home/debian/api/Dockerfile
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
      - /usr/local/bin/docker-compose:/usr/local/bin/docker-compose
    networks:
      - my-network

  # Service Site web pour le déploiement

  angular-dev:
    container_name: angular-dev
    build:
      context: ${WORKSPACE_PATH}/angular
      dockerfile: Dockerfile
    ports:
      - 82:80  # Assurez-vous que le Dockerfile configure votre application Angular pour servir sur le port 80, sinon ajustez-le
    labels:
     - "traefik.enable=true"
     - "traefik.http.routers.angular-dev.rule=Host(`domaine.name.com`)" # Vous pouvez ajuster le sous-domaine selon vos besoins.
     - "traefik.http.routers.angular-dev.entrypoints=web"
     - "traefik.http.services.angular-dev.loadbalancer.server.port=80" 
    networks:
     - my-network

  angular-preprod:
    container_name: angular-preprod
    build:
      context: ${WORKSPACE_PATH}/preprod-angular
      dockerfile: Dockerfile
    ports:
      - 83:80  # Mappé sur le port 80 car il y a nginx dans le container préprod
    labels:
     - "traefik.enable=true"
     - "traefik.http.routers.angular-preprod.rule=Host(`domaine.name.com`)" # Vous pouvez ajuster le sous-domaine selon vos besoins.
     - "traefik.http.services.angular-preprod.loadbalancer.server.port=80" 
     # Ajout du certificat via let's encrypt
     - "traefik.http.routers.angular-preprod.entrypoints=websecure"
     - "traefik.http.routers.angular-preprod.tls.certresolver=myresolver"
    networks:
     - my-network

  angular-prod:
    container_name: angular-prod
    build:
      context: ${WORKSPACE_PATH}/prod-angular
      dockerfile: Dockerfile
    ports:
      - 84:80  # Mappé sur le port 80 car il y a nginx dans le container
    labels:
     - "traefik.enable=true"
     - "traefik.http.routers.angular-prod.rule=Host(`domaine.name.com`)" # Vous pouvez ajuster le sous-domaine selon vos besoins.
     - "traefik.http.routers.angular-prod.entrypoints=websecure"
     - "traefik.http.routers.angular-prod.tls.certresolver=myresolver"
     - "traefik.http.services.angular-prod.loadbalancer.server.port=80" 
    networks:
     - my-network 

  # Service API pour le déploiement

  api-dev:
    container_name: TheTiptop_Api-dev
    build:
      context: ${WORKSPACE_PATH}/the-tiptop-api-dev
      dockerfile: Dockerfile.dev
    ports:
      - 4100:${PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-dev.rule=Host(`domaine.name.com`)" # Vous pouvez ajuster le sous-domaine selon vos besoins.
      - "traefik.http.routers.api-dev.entrypoints=web"
      - "traefik.http.services.api-dev.loadbalancer.server.port=4000"
    environment:
      - HOSTNAME=${HOSTNAME}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    networks:
      - my-network
    depends_on:
      - db
    # command: sh -c 'while ! nc -z db 3306; do sleep 1; done; npm run dev'

  api-preprod:
    container_name: TheTiptop_Api-preprod
    build:
      context: ${WORKSPACE_PATH}/the-tiptop-api-preprod
      dockerfile: Dockerfile
    ports:
      - 4101:${PORT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-preprod.rule=Host(`domaine.name.com`)" # Vous pouvez ajuster le sous-domaine selon vos besoins.
      - "traefik.http.routers.api-preprod.entrypoints=websecure"
      - "traefik.http.routers.api-preprod.tls.certresolver=myresolver"
      - "traefik.http.services.api-preprod.loadbalancer.server.port=4000"
    environment:
      - HOSTNAME=${HOSTNAME}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    networks:
      - my-network
    depends_on:
      - db

  db:
    container_name: TheTiptop_Db
    image: mysql:latest
    env_file:
      - .env
    ports:
      - 3307:3306
    networks:
      - my-network
    restart: always
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./mysql-data:/var/lib/mysql

  backup:
    image: databack/mysql-backup
    env_file:
      - .env
    networks:
      - my-network
    environment:
      - DB_DUMP_FREQ=1440 # Fréquence en minutes soit 1 jour
      - DB_DUMP_BEGIN=+0 # Commence immédiatement
      - DB_SERVER=db # Permet de dire à quel serveur de BDD il doit se connecter
      - DB_USER=root
      - DB_PASS=${MYSQL_ROOT_PASSWORD}
      - DB_NAMES=${MYSQL_DATABASE}
      - DB_DUMP_TARGET=/db
    volumes:
      - ./backups:/db # Stocke les sauvegardes dans le dossier 'backups' de votre hôte
    depends_on:
      - db

  dbtests:
    container_name: TheTiptop_DbTest
    image: mysql:latest
    env_file:
      - .env
    ports:
      - 3308:3306
    networks:
      - my-network
    restart: always
    environment:
      - MYSQL_DATABASE=${MYSQL_TEST_DATABASE}
      - MYSQL_USER=${MYSQL_TEST_USER}
      - MYSQL_PASSWORD=${MYSQL_TEST_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_TEST_ROOT_PASSWORD}
    volumes:
      - ./mysql-data-test:/var/lib/mysql

  # Ajout de phpmyadmin et liaison avec le service DB pour avoir une interface web
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    environment:
      - PMA_HOST=db
      - PMA_PORT=3306
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.phpmyadmin.rule=Host(`domaine.name.com`)" # Vous pouvez ajuster le sous-domaine selon vos besoins.
      - "traefik.http.routers.phpmyadmin.entrypoints=websecure"
      - "traefik.http.routers.phpmyadmin.tls.certresolver=myresolver"
      - "traefik.http.services.phpmyadmin.loadbalancer.server.port=80"
    networks:
      - my-network
    depends_on:
      - db
  

  #Ajout service pour qualité du code

  sonarqube:
    image: sonarqube:latest
    networks:
      - my-network
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://db:5432/sonar
      - SONARQUBE_JDBC_USERNAME=sonar
      - SONARQUBE_JDBC_PASSWORD=sonar
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarqube.rule=Host(`domaine.name.com`)" # Vous pouvez ajuster le sous-domaine selon vos besoins.
      - "traefik.http.routers.sonarqube.entrypoints=web"
      - "traefik.http.services.sonarqube.loadbalancer.server.port=9000"

  sonar-db:
    image: postgres:latest
    networks:
      - my-network
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - postgresqldata:/var/lib/postgresql/data
    labels:
      - "traefik.enable=false" # Nous ne souhaitons pas que la base de données soit accessible depuis Traefik

volumes:
  postgresqldata:

networks:
  my-network:
    external: true
